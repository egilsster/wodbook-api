openapi: "3.0.0"
info:
  title: Wodbook API
  version: 0.0.1
  description: >-
    ## About

    The Wodbook API is a back-end for a mobile application that helps
    you keep track of all your CrossFit related things like workouts
    and movements.
tags:
  - name: users
    description: A user account in the system.
  - name: workouts
    description: Workouts are combinations of movements done with the purpose of measuring your performance.
  - name: movements
    description: Movements are exercises for users to track their progress.
security:
  - bearerAuth: []
servers:
  - url: /v1
paths:
  /users/login/:
    post:
      summary: Logs in user with given credentials.
      security: []
      operationId: loginUser
      tags:
        - users
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
        400:
          description: Login unsuccessful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /users/register/:
    post:
      summary: Creates a user with the provided information.
      security: []
      operationId: registerUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        201:
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        400:
          description: Registration unsuccessful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error" # TODO(egilsster): API actually returns empty response at the moment
  /users/me/:
    get:
      summary: Shows information about the logged in user.
      operationId: aboutUser
      tags:
        - users
      responses:
        201:
          description: Returns user information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Updates information about the logged in user and returns the updated user model.
      operationId: updateUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUser"
      responses:
        200:
          description: User has been updated and returns user information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /workouts/:
    get:
      summary: List all workouts.
      operationId: getWorkouts
      tags:
        - workouts
      responses:
        200:
          description: Lists all workouts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workouts"
    post:
      summary: Creates a new workout.
      operationId: createWorkout
      tags:
        - workouts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/workout"
      responses:
        201:
          description: Creates a new workout and returns it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workout"
        409:
          description: Resource with same unique identity already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        422:
          description: Unprocessable entity. Validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Update an existing workout.
      operationId: updateWorkout
      tags:
        - workouts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateWorkout"
      responses:
        200:
          description: Updates the workout and returns it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workout"
        409:
          description: Resource with same unique identity already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        422:
          description: Unprocessable entity. Validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /workouts/{id}:
    get:
      summary: Returns a specific workout.
      operationId: getWorkoutById
      tags:
        - workouts
      parameters:
        - name: id
          in: path
          required: true
          description: Workout identifier
          schema:
            type: string
      responses:
        200:
          description: Returns workout with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workout"
        403:
          description: Forbidden. User is not authorized to read workout with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: Could not find the workout with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      summary: Creates a score for the workout with {id}.
      operationId: createWorkoutScore
      tags:
        - workouts
      parameters:
        - name: id
          in: path
          required: true
          description: Workout identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/workoutScore"
      responses:
        200:
          description: Returns workout score.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workoutScore"
        403:
          description: Forbidden. User is not authorized to create score for workout with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: Could not find the workout with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /movements/:
    get:
      summary: List all movements.
      operationId: getMovements
      tags:
        - movements
      responses:
        200:
          description: Lists all movements.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movements"
    post:
      summary: Creates a new movement.
      operationId: createMovement
      tags:
        - movements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/movement"
      responses:
        201:
          description: Creates a new movement and returns it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movement"
        409:
          description: Resource with same unique identity already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        422:
          description: Unprocessable entity. Validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Updates an existing movement.
      operationId: updateMovement
      tags:
        - movements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateMovement"
      responses:
        200:
          description: Updates the movement and returns it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movement"
        409:
          description: Resource with same unique identity already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        422:
          description: Unprocessable entity. Validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /movements/{id}:
    get:
      summary: Returns a specific movement.
      operationId: getMovementById
      tags:
        - movements
      parameters:
        - name: id
          in: path
          required: true
          description: Movement identifier
          schema:
            type: string
      responses:
        200:
          description: Returns movement with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movement"
        403:
          description: Forbidden. User is not authorized to read movement with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: Could not find the movement with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      summary: Creates a score for the movement with {id}.
      operationId: createMovementScore
      tags:
        - movements
      parameters:
        - name: id
          in: path
          required: true
          description: Movement identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/movementScore"
      responses:
        200:
          description: Returns movement score.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movementScore"
        403:
          description: Forbidden. User is not authorized to create score for movement with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: Could not find the movement with {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    token:
      type: object
      properties:
        token:
          type: string
    user:
      type: object
      properties:
        user_id:
          type: string
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
          description: Hash of the password.
        box_name:
          type: string
          description: The box name, if the user associates with one.
        height:
          type: number
        weight:
          type: number
        date_of_birth:
          type: string
          format: yyyy-mm-dd
        avatar_url:
          type: string
          description: An image that the user adds to his account.
    updateUser:
      type: object
      description: The update user model.
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          description: Hash of the password.
        box_name:
          type: string
          description: The box name, if the user associates with one.
        height:
          type: number
        weight:
          type: number
        date_of_birth:
          type: string
          format: yyyy-mm-dd
        avatar_url:
          type: string
          description: An image that the user adds to his account.
    workouts:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/workout"
    workout:
      type: object
      description: The workout model.
      properties:
        workout_id:
          type: string
          readOnly: true
        name:
          type: string
          description: The name of this workout.
        measurement:
          type: string
          description: How this workout is scored.
        description:
          type: string
          description: Description of the workout.
        scores:
          type: array
          items:
            $ref: "#/components/schemas/workoutScore"
        global:
          type: boolean
          description: Whether this is for all users of bound to the creator. Known benchmarks should only be global.
        created_at:
          type: string
          format: date
          readOnly: true
        updated_at:
          type: string
          format: date
          readOnly: true
    updateWorkout:
      type: object
      description: The workout update model.
      properties:
        name:
          type: string
          description: The name of this workout.
        description:
          type: string
          description: Description of the workout.
    workoutScore:
      type: object
      description: Score for a workout.
      properties:
        workout_score_id:
          type: string
          readOnly: true
        workout_id:
          type: string
          readOnly: true
          description: The workout this score belongs to.
        score:
          type: string
        rx:
          type: boolean
        created_at:
          type: string
          format: date
          readOnly: true
        updated_at:
          type: string
          format: date
          readOnly: true
    movements:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/movement"
    movement:
      type: object
      description: The movement model.
      properties:
        movement_id:
          type: string
          readOnly: true
        name:
          type: string
          description: The name of this movement.
        measurement:
          type: string
          description: How this movement is scored.
        description:
          type: string
          description: Description of the workout.
        scores:
          type: array
          items:
            $ref: "#/components/schemas/movementScore"
        global:
          type: boolean
          description: Whether this is for all users of bound to the creator.
        created_at:
          type: string
          format: date
          readOnly: true
        updated_at:
          type: string
          format: date
          readOnly: true
    updateMovement:
      type: object
      description: The movement update model.
      properties:
        name:
          type: string
          description: The name of this movement.
        description:
          type: string
          description: Description of the workout.
    movementScore:
      type: object
      description: Score for a movement.
      properties:
        movement_score_id:
          type: string
          readOnly: true
        movement_id:
          type: string
          readOnly: true
          description: The movement this score belongs to.
        score:
          type: string
        sets:
          type: number
        reps:
          type: number
        distance:
          type: string
        notes:
          type: string
          description: Any notes to mention for this score (after a wod, etc.).
        created_at:
          type: string
          format: date
          readOnly: true
        updated_at:
          type: string
          format: date
          readOnly: true
    error:
      description: An error object.
      required:
        - status
      properties:
        status:
          type: string
          description: Description of what happened.
